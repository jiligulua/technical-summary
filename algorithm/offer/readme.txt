3.高质量的代码
代码的规范性：清晰的书写、清晰的布局和合理的命名
代码的完整性：负面测试（错误输入）、边界测试（边界输入值）和功能测试（基本功能）可保证完整的代码

考虑大数问题
边界值的测试：若是递归，要考虑递归终止的边界值是否正确；若是循环，要考虑结束循环的边界条件是否正确。这些都是边界测试时考虑的用例。

代码考虑可扩展性和可维护性

3种错误处理方法：返回值标识错误码，设置全局变量，使用异常
和面试官讨论确定如何处理非法输入：调用者可根据返回码判断出错原因，最大的问题是不能把结果通过返回值赋值给其它变量；使用全局变量函数可以直接返回结果值，但容易忘记错误码来分析问题；用异常的话结构清晰，只是会打乱正常的执行顺序，对程序性能有一定影响。

全面但不够高效的解法，离offer已经很近啦

用位移运算符代替求余运算符来判断一个数是奇数还是偶数，位运算的效率比乘除法及求余元算（%）的效率要高很多。

递归函数就是程序函数，而递归的结束条件就是程序函数刚进入后的判断条件。根据递归函数的返回值进行相关计算，并将结果返回给上一层。

19正则表达式匹配：巧妙使用递归方式，并且全面考虑各种可能，而.可以和普通的字符任意匹配一个。任何递归的函数，都是调用函数的Core，这种函数命名方式非常好，必须大力提倡。
20表示数值的字符串：抽象出一种模式，使用英文字母替代，并且可有可无的部分，用方括号表示[]，如：A[.[B]][e|EC]。同时用双指针巧妙的扫描字符串，而返回值用bool表示scan成功与否，这种方式必须掌握。就像数独中的那些技巧，在真正的解题过程中，能够发挥作用。


21.调整数组顺序使奇数位于偶数前面
partition方式，使用两个指针，前面的指针一直找到偶数，后面的指针一直找到奇数，交换这两个数，同时，前面的指针+1，后面的指针减1，直到两个指针相遇停止。同时，要保证代码具有可重用性，注意区分业务代码和逻辑代码。


27.二叉树的镜像
一般二叉树的算法都逃不出3个遍历，前序、中序和后序，还有就是若将递归转化为循环，必然用到堆栈或队列。同时初始化之后，用while循环判断不为空，就一直执行，找到空为止。而对堆栈的处理是，栈只是按一定规则来用来存放数据，真正的处理是在出栈之后的处理，此时的处理会发生入栈。
